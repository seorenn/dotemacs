This is /home/melpa/melpa/working/egg-20130702.925/egg.info, produced
by makeinfo version 4.13 from
/home/melpa/melpa/working/egg/doc/egg.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Egg: (egg).        Emacs Got Git
END-INFO-DIR-ENTRY

Copyright (C) 2009, 2010, 2011 Bogolisk <bogolisk@gmail.com>.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with no Front-Cover Texts,
     and with no Back-Cover Texts.


File: egg.info,  Node: Top,  Next: Rant,  Prev: (dir),  Up: (dir)

Egg (Draft) Manual
******************

EGG is an attempt to provide a seamless integration of GIT within
EMACS.  EGG is currently tested with GIT 1.7.12 and EMACS 23. It may
work with other versions of EMACS and GIT but it's very difficult for
the EGG's developer to investigate and fix bugs that only appear in
versions or platforms that he doesn't use. Patches to fix bugs in other
emacsen or volunteers to maintain compatibility however are welcome.

* Menu:

* Rant::
* Acknowledgements::
* Overview::
* File::
* Status::
* Commit::
* Log::
* Blame::
* Resolving Conflicts::
* Customisations::
* Commands::


File: egg.info,  Node: Rant,  Next: Acknowledgements,  Prev: Top,  Up: Top

Rant
****

EGG wasn't designed to replace the GIT excellent official porcelain
layer, especially when used with the bash_completion package. In the
EGG's developer's opinion: it's pointless to write a git-mode in emacs
to let user type `M-x git-reset' when he/she can do exactly the same
thing in BASH. An emacs interface to GIT should provide the
conveniences that would make it easier to accomplish the same task than
the GIT's porcelain. EGG, thus, was designed to perform the same goal
as GIT ALIASES. Make it more convenient to accomplish common git
operations.

One example:

The in EGG'S status buffer, when the user _unstages_ a file, EGG will
invoke different git operations depend on the origin/status of the
file: it was an existing file, it was new file or it was a file with
merge conflicts which were just resolved in the index.

Again, EGG was design to help you accomplish many git common operations
in very convenient EMACS way.

As with GIT ALIASES, EGG won't save you from learning GIT. Instead it
expects its user to be familiar with GIT. This manual tries to document
all EGG functionalities and explain the design of some of the commands.


File: egg.info,  Node: Acknowledgements,  Next: Overview,  Prev: Rant,  Up: Top

Acknowledgements
****************

In the beginning, EGG was a fork of MARIUS VOLLMER's excellent MAGIT.
While EGG was later completely rewritten, it still keeps the genius
_staging/unstaging_ metaphor in the _status buffer_.

BYPLAYER gracefully picked up the maintainership when Bogolisk went
hiatus for several... years!!! He's the current maintainer of EGG and
his repo is at: `https://github.com/byplayer/egg'


File: egg.info,  Node: Overview,  Next: File,  Prev: Acknowledgements,  Up: Top

Overview
********

Using EGG is simple:
   * download `egg.el' and put in your EMACS's `loadpath'.

   * add `(require 'egg)' in your `.emacs'

   * very important: disable VC's git backend.  Do `M-x
     customize-option RET vc-handled-backends'.  Then <DEL> the Git
     option.

   * open a file in a git repo from within emacs. Et voila!

Using Egg
=========

Egg has many components but the 3 most important ones are:
   * The Status Buffer This is where one deals with the Index and
     Work-Tree:
        * staging/unstaging files/hunks

        * resolving merge conflicts (from
          merge/rebase/apply/cherry-pick/revert/stash)

        * launch ediff to view delta or conflicts.

        * committing/amending

        * saving/applying stashed work-in-progresses
     *Note Status::.

   * The Log Buffer This is where one manipulates the repo's DAG:
        * starting merge/rebase/cherry-pick/revert/reset operation.  If
          the operations started from the Log Buffer created a
          conflict, Egg will open the Status Buffer so you can resolve
          it.

        * creating branch/tag.

        * marking commits for the _next_ INTERACTIVE-REBASE.

        * fetching refs from remote (egg refuses to support pull).

        * pushing refs to remote.

        * viewing commits, use ediff with changes introduced by a
          commit.
     *Note Log::.

   * The Minor Mode This mode let you issue git commands (on the
     buffer) while editing. Some are:
        * staging/unstaging/cancel the current file's modifications.

        * diffing the current file against the Index or another revision

        * search (pickaxing) history for a string/regexp/line.

        * view other revisions of the current file

        * blame revisions for lines in the file, *Note Blame::.

        * launch ediff to compare file vs index or other revisions.
     *Note File::.

Context-sensitive Key-bindings  Menu
====================================

Egg heavily uses context-sensitive bindings. The command bound to a key
depend where the cursor was. Example: on a commit line in the Log
Buffer, `o' will checkout a branch if the cursor was on top of a branch
name. On the other hand, it will detatch HEAD and checkout the commit
if the cursor was on a branch name.

`C-mouse-2' is bound it to the context menu when using menu. There's
also a text-based electric context menu (after loading the `egg-key') ,
bound to `kp-enter' by default.  In the text-based menu, each line show
the key and the description of a command.  To run a command you can
type the command's key or move the cursor to the line and select the
line with `kp-enter'. For example, on a commit line in the Log Buffer,
the 3 sequences below will perfom the same action: create a new branch
pointing at the commit.
   * `B'.

   * `kp-enter' to show the menu, then `B'.

   * `kp-enter' to show the menu, then move the line marked with `B'
     then type `kp-enter'.

Each variant of the command that would be invoked with `C-u' would be
displayed on a separate line under the main line of the command. For
example, `C-u /' will be displayed on a line right after `/'. The 3
sequences below ill also perform the same thing: create a new branch
even if the name is already in used.
   * `C-u B'.

   * `kp-enter' to show the menu then `C-u B'.

   * `kp-enter' to show the menu, move to the line marked with `C-u B'
     then select the line with `kp-enter'.

Sections and Subsections
========================

In Egg special buffers, information are usually grouped in hierarchical
sections. A section can contains one or more subsections which in turn
can contains one or more sub-sub-sections, etc. Sections can
hidden/collapsed, turning the whole buffer into a hierachical folding
structure. The commands mapped when the cursor is on top of a section
are:

`h'
     Toggle the hidden state of the current section.  *note
     egg-section-cmd-toggle-hide-show::

`H'
     Toggle the hidden state of the subsections of the current section.
     *note egg-section-cmd-toggle-hide-show-children::

`n'
     Move to the next section.  *note egg-buffer-cmd-navigate-next::

`C-u n'
     Move to the next section of the same type.

`p'
     Move to the previous section.  *note egg-buffer-cmd-navigate-prev::

`C-u p'
     Move to the previous section of the same type.

`kp-enter'
     Show a text-based context menu (if `egg-key' package was loaded).

Specific types of sections (diff, hunk, commit, etc.) bind extra
commands in addition to the commands listed above.


File: egg.info,  Node: File,  Next: Status,  Prev: Overview,  Up: Top

The Egg Minor Mode
******************

Using Egg when Editing Files
============================

When the `egg' library is loaded, `egg-minor-mode' will be activated
when visiting a file in a git repository. The mode-line will initially
show Egg. However, after the first time the repo's status was read by
Egg, it will show Git:branch where branch is the current branch-name.
The following commands are mapped in the minor mode.

`C-x v a'
     Toggle blame mode for the current-file, *Note Blame::.  *note
     egg-file-toggle-blame-mode::

`C-u C-x v a'
     Do not ask for confirmaton before saving the buffer.

`C-x v c'
     Open the commit buffer for composing a message.  *note
     egg-commit-log-edit::

`C-u C-x v c'
     The message will be use to amend the last commit.

`C-u C-u C-x v c'
     Just amend the last commit with the old message.

`C-x v e'
     Compare, using ediff, the current file's contents in work-dir with
     vs a rev.  *note egg-file-ediff::

`C-x v f'
     Open a file tracked by git.  *note egg-find-tracked-file::

`C-x v h'
     Show the commits in the current branch's DAG that modified the
     current file.  *note egg-file-log::

`C-x v i'
     Add the current's file contents into the index.  *note
     egg-file-stage-current-file::

`C-x v o'
     Checkout HEAD's version of the current file.  *note
     egg-file-checkout-other-version::

`C-u C-x v o'
     Ask for confirmation if the current file contains unstaged changes.

`C-x v u'
     Checkout INDEX's version of the current file.  *note
     egg-file-cancel-modifications::

`C-u C-x v u'
     Then ask for confirmation if the current file contains unstaged
     changes.

`C-x v v'
     Guess and perform the next logical action.  *note egg-next-action::

`C-u C-x v v'
     Ask for confirmation before executing the next-action.

`C-x v /'
     Search the current file's history for changes introducing or
     removing a string *note egg-search-file-changes::

`C-u C-x v /'
     Search for a regexp instead of a string.

`C-u C-x v C-u /'
     Prompt the user for advanced search mode.

`C-x v ='
     Diff the current file in another window.  *note egg-file-diff::

`C-x v ~'
     Show other version of the current file in another window.  *note
     egg-file-version-other-window::

The following commands launch Egg's special buffers to perform various
git related tasks.
`C-x v b'
     Start a new branch from HEAD.  *note egg-start-new-branch::

`C-x v ?'
     Search the current branch's history for changes
     introducing/removing a term.  *note egg-search-changes::

`C-x v l'
     Show the commit DAG of a ref, *Note Log::.  *note egg-log::

`C-x v L'
     Show commit DAG of a ref and its reflogs, *Note Log::.  *note
     egg-reflog::

`C-x v s'
     Show the status of the current repo, *Note Status::.  *note
     egg-status::


File: egg.info,  Node: Status,  Next: Commit,  Prev: File,  Up: Top

Status Buffer, manipulating the Index and the Worktree.
*******************************************************

This special buffer is one of EGG's two important special buffers (the
other is the LOG BUFFER). It's launched by the *note egg-status::. This
buffer is designed to manipulate the INDEX and the WORKTREE. As its
name indicates, it show the current status of the repository. It's also
the place where user goes, to resolve conflicts during merge or rebase.
Since its purpose is to manipulate the INDEX and the WORKTREE, the
Status Buffer also shows the list of _stashed_ WIPs.

Out of the box, the status buffer displays a _lot_ of informations.
However, you can customize what and how it displays informations. For
_what_ to show, *Note egg-status-buffer-sections::. For _how_ to show,
*Note egg-buffer-hide-sub-blocks-on-start::, and *Note
egg-buffer-hide-sub-blocks-on-start::.

By default, the status buffer display 5 sections. On the top is the
REPO section where it shows the current branch (or current commit if
HEAD was detached), the sha1, the repository and optionally the HELP
section (the Help section can be initially hidden *note
egg-buffer-hide-help-on-start::, or simply omitted *note
egg-show-key-help-in-buffers::). Following the repo section is the
UNSTAGED section. This section shows a sequence of diffs, describing
difference between the index and the work-tree. Next comes the STAGED
section, this section also contains a sequence of diffs but they
describe the difference between HEAD and the index. Another one is the
UNTRACKED section where the untracked files in the repository are
listed. Finally, the last section is STASH, where stashed WIPs are
displayed. To navigate among the sections as well as their subsection,
*Note Sections::.

The basic _non_-context-sensitive bindings in the STATUS BUFFER (and
the LOG BUFFER) are:
`q'
     Leave (and burry) the special buffer *note egg-quit-buffer::

`G'
     Re-initialize the current special buffer.  *note
     egg-buffer-cmd-refresh::

`g'
     Refresh the current egg special buffer.  *note
     egg-buffer-cmd-refresh::

`n'
     Move to the next section.  *note egg-buffer-cmd-navigate-next::

`C-u n'
     Move to the next section of the same type.

`p'
     Move to the previous section.  *note egg-buffer-cmd-navigate-prev::

`C-u p'
     Move to the previous section of the same type.

The STATUS BUFFER also bind the following _non_ context-sensitive
commands:
`c'
     Open the commit buffer for composing a message.  *note
     egg-commit-log-edit::

`C-u c'
     The message will be use to amend the last commit.

`C-u C-u c'
     Just amend the last commit with the old message.

`d'
     Prompt a revision to compare against worktree.  *note
     egg-diff-ref::

`l'
     Show the commit DAG of a ref.  *note egg-log::

`o'
     Prompt a revision to checkout.  *note
     egg-status-buffer-checkout-ref::

`w'
     Stash current work-in-progress in the WORKTREE and the INDEX.
     *note egg-status-buffer-stash-wip::

`L'
     Show commit DAG of the current branch (or a ref) and its reflogs.
     *note egg-reflog::

`S'
     Stage all tracked files in the repository.  *note
     egg-stage-all-files::

`U'
     Unstage all files in the index.  *note egg-unstage-all-files::

`C-c C-h'
     Hide all sections in current special egg buffer.  *note
     egg-buffer-hide-all::

`C-u C-c C-h'
     Show all sections in current special egg buffer.

`X'
     When in the status buffer, throw away local modifications in the
     work-tree.

`C-u X'
     When in the status buffer, throw all (staged and unstaged)
     modifications.  *note egg-status-buffer-undo-wdir::

When the repo is in mid-rebase (due to conflicts or editings), there are
extra commands bound in the Status Buffer:
`x'
     Abort the current rebase session.  *note egg-buffer-rebase-abort::

`u'
     Skip the current commit and continue the current rebase session.
     *note egg-buffer-selective-rebase-skip::

`RET'
     Continue the current rebase session.  *note
     egg-buffer-selective-rebase-continue::

Due to the context-sensitve nature of Egg, position the cursor on the
_repo_ section of the Status Buffer before issueing the above commands.
It's to avoid the context-sensitve bindings of the sections from taking
over. For example, if the cursor was in the repo sectionk `RET' would
be non-context-sensitively bound to *note
egg-buffer-selective-rebase-continue::. However, if the cursor was on
top of a hunk section, `RET' would be context-sensitively bound to
*note egg-hunk-section-cmd-visit-file-other-window::.

To see the context binding of the current cursor's location, type
`kp-enter', *Note Context Menu::.

Unstaged or Unmerged Changes
============================

Normally, the Unstaged Section shows the difference between the Index
and the WorkTree. In this case, the diff, if present, would be a
regular diff sequence. If the repo is in mid-merge (due to conflict),
the diff, if present, would be a combined-diff sequence. Sometimes,
there would be empty combined-diff deltas. Those are the files where
conflicts were resolved but the files were not yet added to the Index.

Diff
====

Context bindings for all types of the diff header: all Section commands
(*note egg-section-map::), plus
`RET'
     Visit file the current file in other window.  *note
     egg-diff-section-cmd-visit-file-other-window::

`f'
     Visit file the current file.  *note
     egg-diff-section-cmd-visit-file::

`='
     Ediff src and dest versions of the current file based on the diff
     at POS.  *note egg-diff-section-cmd-ediff::

Unstaged Diff
=============

Context bindings for an _unstaged_ diff header: all Diff Section
commands (*note egg-diff-section-map::), plus
`u'
     Checkout the contents of the current file from the Index.  *note
     egg-diff-section-cmd-undo::

`='
     Compare the current file and its staged contents using ediff.
     *note egg-unstaged-section-cmd-ediff::

`s'
     Update the Index with the file.  *note egg-diff-section-cmd-stage::

`DEL'
     Revert the file and its slot in the index to its contents in HEAD.
     *note egg-diff-section-cmd-revert-to-head::

Unmerged Diff
=============

Context bindings for an _unmerged_ diff header: all Unstaged Diff
Section commands (*note egg-unstaged-diff-section-map::), plus
`='
     Run ediff3 to resolve merge conflicts in the current file.  *note
     egg-unmerged-section-cmd-ediff3::

Hunk
====

Context bindings for all types of the hunk: all Section commands (*note
egg-section-map::), plus
`RET'
     Visit the current file in other-window and goto the current line
     of the hunk.  *note egg-hunk-section-cmd-visit-file-other-window::

`='
     Ediff src and dest versions of the current file based on the diff
     under the cursor.  *note egg-diff-section-cmd-ediff::

`f'
     Visit the current file and goto the current line of the hunk.
     *note egg-hunk-section-cmd-visit-file::

Unstaged Hunk
=============

Context bindings for an unstaged hunk: all Hunk commands (*note
egg-hunk-section-map::), plus
`u'
     Remove the file's modification described by the hunk under the
     cursor.  *note egg-hunk-section-cmd-undo::

`='
     Compare the current file and its staged copy using ediff.  *note
     egg-unstaged-section-cmd-ediff::

`s'
     Add the hunk under the cursor to the index.  *note
     egg-hunk-section-cmd-stage::

Unmerged Hunk
=============

Context bindings for an unmerged hunk: all Unstaged Hunk commands
(*note egg-unstaged-hunk-section-map::), plus
`='
     Run ediff3 to resolve merge conflicts in the current file.  *note
     egg-unmerged-section-cmd-ediff3::

Unmerged Conflict
=================

This is conflict section inside an unmerged hunk. It's marked by git
with the strings: <<<<<<<, ======= and >>>>>>>. The context bindings
for this section included all commands Unstaged Hunk commands (*note
egg-unstaged-hunk-section-map::), plus
`m'
     interactively resolve the conflict under the cursor.  *note
     egg-unmerged-conflict-take-side::

`M'
     choose one side (_ours_ or _theirs_) of the conflict to resolved
     the whole file. (git checkout -ours orgit checkout -theirs.  *note
     egg-unmerged-conflict-checkout-side::

Staged or Merged Changes
========================

The Staged Section shows the difference between HEAD and the Index.  It
also show unmerged entries: WorkTree's files that have conflicts or
those with resolved conflicts but not added into the Index. The delta
in the Staged Section are always of the regular diff.

Staged Diff
===========

Context bindings for an _staged_ diff header: all Diff Section commands
(*note egg-diff-section-map::), plus
`='
     Compare the WorkTree's file, its contents in the Index and in
     HEAD, using 3-way ediff.  *note egg-staged-section-cmd-ediff3::

`s'
     For the file under the cursor, revert its contents in the Index to
     HEAD's.  *note egg-diff-section-cmd-unstage::

`DEL'
     Revert the file and its slot in the index to its contents in HEAD.
     *note egg-diff-section-cmd-revert-to-head::

The Untracked Section
=====================

This simple section lists the untracked and _unignored_ files in the
repository. Its purpose is to catch files that one forgot to add into
the Index. Context bindings for the untracked section: all Section
commands (*note egg-section-map::), plus

`DEL'
     Add an ignore pattern based on the string at point.  *note
     egg-ignore-pattern-from-string-at-point::

`s'
     add untracked file(s) to the repository *note
     egg-status-buffer-stage-untracked-file::

The Stash Section
=================

This section displays the stashed WIPs. The context bindings for the
stash section: all Section command (*note egg-section-map::), plus:
`SPC'
     Load the show the details of the stashed WIP under the cursor.
     *note egg-sb-buffer-show-stash::

`RET'
     Apply the stashed WIP under the cursor to WorkTree and Index.
     *note egg-sb-buffer-apply-stash::

`a'
     Apply the stashed WIP under the cursor to WorkTree and Index.
     *note egg-sb-buffer-apply-stash::

`DEL'
     Drop the stashed WIP under the cursor.  *note
     egg-sb-buffer-drop-stash::

`o'
     Pop and apply the stash under the cursor to WorkTree and Index..
     *note egg-sb-buffer-pop-stash::

TBD: binding for the stash's contents.


File: egg.info,  Node: Commit,  Next: Log,  Prev: Status,  Up: Top

Commit Buffer
*************

This special buffer is for composing a commit log message. It has a
heading section decribing information about the next commit:
   * the branch to commit into

   * the repository

   * the commiter

   * the gpg key if the commit is to be signed.
Following the heading section is the text area. The user should compose
the log message in here. This section use text-mode's keymap with the
following extra bindings:
`C-c C-k'
     Cancel composing the message.  *note egg-log-msg-cancel::

`C-c C-s'
     Toggle the gpg-signed status of the message.  *note
     egg-log-msg-buffer-toggle-signed::

`C-c C-c'
     Done editing, proceed with commiting.  *note egg-log-msg-done::

After the the text-area is the 3 sections: staged, unstaged and
untracked.  Here, they are called respectively: CHANGES TO COMMIT,
DEFERRED CHANGES and UNTRACKED FILES. The context bindings are
identical to same sections in the Status Buffer, *Note Status::.


File: egg.info,  Node: Log,  Next: Blame,  Prev: Commit,  Up: Top

Log Buffer
**********

*note egg-log::, *note egg-file-log:: and *note egg-reflog:: are three
of the different way of launching the LOG BUFFER. This buffer shows a
list of commits, usually forming a DAG. In the regular cycle:
edit-add-commit, commits are added to the current branch in a linear
fashion. However, with rebase, amending and reset, the branch's head can
move in a non-linear manner and previous commits where it used to point
at might no longer reachable from the latest commit. That's why git's
REFLOG is so important, it shows the previous incarnations of a ref.
Those previous incarnations are commits that might not be reachable by
walking history from the latest commit. Realizing that importance,
EGG's LOG BUFFER was designed to show both the combined DAG and branch
(or a ref) and its reflogs.

When launch without any prefix, `egg-log' will show the combined DAG of
the current branch (or HEAD) and its reflogs. With `C-u' prefix, the
buffer will show the combined DAG of all the refs in the repository
(without the reflogs). With `C-u C-u' prefix, the command will prompt
for a ref then show the combined DAG of that ref and its reflogs.

The buffer is composed of the repo section including the help
subsection and the DAG section where almost every line describes a
commit. The refs that point at the commit are listed on the commit's
line. The details of a commit, i.e. the diffs, can be loaded with <SPC>
(*note egg-log-buffer-insert-commit::). As with the Status Buffer, the
hide/show and the navigation commands work the same way here *Note
Status::. The STATUS BUFFER was designed primarily to deal with the
index, the LOG BUFFER, on the other hand, was intended for actions that
operate on the DAG. Most commands in the Log Buffer are context
sensitive. Their behaviour depends on the current location of the
cursor. In the DAG section of buffer, almost every line described a
commit (Egg calls it a commit line.)  Thus, most commands in the buffer
act upon the commit described on the line under the cursor.  However,
if the cursor was on a ref name (a branch, a tag, a remote or a
reflog), many commands will operate upon the ref instead of the commit.

There also minor variants of the LOG BUFFER, examples:
   * the File's history where the buffer only displays the DAG's commits
     modifying the file.

   * the QUERY BUFFER, this buffer display the results of a _pickaxe_
     search. The commits are only those introducing or removing a term
     where _term_ can be a string, a regexp or a line.

Moving HEAD
===========

`o'
     Checkout. This key will checkout... something. If the cursor was
     on a branch-name, then Egg will checkout that branch. HEAD will be
     symbolic.  On the other hand, the cursor was on simple commit line
     or on a non-branch ref such as a tag or a remote-tracking branch,
     Egg will detach HEAD and checkout the commit.

`a'
     Anchor HEAD (Egg's weird name for `git reset'. If HEAD was
     attached (symbolic), then Egg will move the current branch to the
     new commit. If HEAD was detached, HEAD will be moved to the new
     commit (but still detached).

`u'
     push the current branch to the commit under the cursor.

Creating REFs
=============

`t'
     Tag the commit under the cursor.

`T'
     Create an annotated tag pointing to the commit under the  cursor.

`B'
     Create a new branch pointing to the commit under the cursor.

`b'
     Start (checkout) a new branch poiting to the commit under the
     cursor.

Merging Changes
===============

`m'
     Merge the chain of commits starting at the one under the cursor
     into HEAD.

`r'
     rebase the current branch on to the commit under the cursor.

`c'
     pick the _one and only one_ commit under the cursor and put it on
     HEAD.

`M-x egg-log-buffer-do-revert-rev'
     undo the changes introduced by _the_ commit under the cursor.

`r'
     rebase the current branch onto the commit under the cursor.

`R'
     rebase the chain of _marked commits_ of the current branch onto
     the commit under the cursor.

Marking Commits for interactive rebase
======================================

Before starting an interactive rebase, at least one commits should be
marked.
`+'
     mark the commit under the cursor to be picked in the _upcoming_
     interactive rebase.

`~'
     mark the commit under the cursor to be edited in the _upcoming_
     interactive rebase.

`.'
     mark the commit under the cursor to be squashed in the _upcoming_
     interactive rebase.
Using `C-u' prefix with the mark commands, one can reorder the commits
in the rebase. In this case, pressing `g' to refresh the LOG BUFFER will
display the reordered to-be-rebased sequence of commits at the top of
the buffer, right after the Help section.

Pushing and Fetching
====================

`U'
     Uploading (pushing) to a remote site. If the cursor was on a
     branch and the branch has an defined upstream, Egg will push the
     branch to the remote site of the upstream branch. If the branch
     has no defined usptream, Egg will prompt the user for a remote
     site to push it to. If the cursor was on a remote _site_ (i.e. the
     _site_ part in the site/branch name), Egg will prompt for a ref
     (branch or tag) to push to that remote site.

`D'
     Download (fetching) from a remote site. If the cursor was on a
     remote tracking _branch_ (i.e. the branch part of a site/branch
     name). Egg will attempt to fetch the remote branch from that site.
     If the cursor was on remote _site_ (i.e. the _site_ part of the
     site/branch name), Egg will prompt for a ref to fetch (or all)
     from that remote site.

Summary
=======

All _log-style_ buffers have the following bindings: All buffer
bindings describe in *note egg-buffer-mode-map::, plus
`n'
     Move cursor to the next ref.  *note egg-log-buffer-next-ref::

`p'
     Move cursor to the previous ref.  *note egg-log-buffer-prev-ref::

`s'
     Show the status of the current repo.  *note egg-status::
The log buffer have the following bindings: All buffer bindings
describe in *note egg-log-buffer-base-map::, plus
`L'
     Show reflogs for the ref under the cursor *note
     egg-log-buffer-reflog-ref::

`/'
     Search the current branch's history for changes
     introducing/removing a term.  *note egg-search-changes::

A commit line, whether in the main LOG BUFFER or in one of the
log-style buffers, has the following context bindings: all section
commands as described in *note egg-section-map::, plus
`SPC'
     Load and show the details of commit under the cursor.  *note
     egg-log-buffer-insert-commit::

`B'
     Create a new branch pointing to commit under the cursor, without
     checking it out.  *note egg-log-buffer-create-new-branch::

`C-u B'
     Force the branch creation by deleting the old one with the same
     name.

`b'
     Create a new branch pointing to commit under the cursor, and make
     it the new HEAD.  *note egg-log-buffer-start-new-branch::

`C-u b'
     Force the creation by deleting the old branch with the same name.

`o'
     Checkout ref or commit under the cursor.  *note
     egg-log-buffer-checkout-commit::

`C-u o'
     Force the checkout even if the index was different

`t'
     Tag commit under the cursor.  *note egg-log-buffer-tag-commit::

`C-u t'
     Force the creation of the tag

`T'
     Start composing the message to create an annotated tag on commit
     under the cursor.  *note egg-log-buffer-atag-commit::

`C-u T'
     The annotated tag will be gpg-signed.

`a'
     Move the current branch or the detached HEAD to commit under the
     cursor.  *note egg-log-buffer-anchor-head::

`C-u a'
     HEAD will be moved, index will be reset and the work tree updated.

`C-u C-u a'
     Prompt for the git reset mode to perform.

`m'
     Merge to HEAD the path starting from commit under the cursor.
     *note egg-log-buffer-merge::

`C-u m'
     Do not auto commit the merge result.

`C-u C-u m'
     Prompt the user for the type of merge to perform.

`r'
     Rebase HEAD using commit under the cursor as upstream.  *note
     egg-log-buffer-rebase::

`c'
     Pick commit under the cursor and put on HEAD.  *note
     egg-log-buffer-pick-1cherry::

`C-u c'
     Will not auto-commit but let the user re-compose the message.

`i'
     Show information about the ref or the mark under the cursor.
     *note egg-log-show-ref::

In the main LOG BUFFER, a commit line has the additional context
bindings:
`R'
     Start an interactive session to rebase the marked commits onto
     commit under the cursor.  *note egg-log-buffer-rebase-interactive::

`+'
     Mark commit under the cursor to be picked in the upcoming
     interactive rebase.  *note egg-log-buffer-mark-pick::

`C-u +'
     Prompt for reordering.

`.'
     Mark commit under the cursor to be squashed in the upcoming
     interactive rebase.  *note egg-log-buffer-mark-squash::

`C-u .'
     Prompt for reordering.

`~'
     Mark commit under the cursor to be edited in the upcoming
     interactive rebase.  *note egg-log-buffer-mark-edit::

`C-u ~'
     Prompt for reordering.

`DEL'
     Unmark commit under the cursor.  *note egg-log-buffer-unmark::

`C-u DEL'
     Unmark all.

`*'
     Mark commit under the cursor as the BASE commit.  *note
     egg-log-buffer-mark::

`='
     Compare HEAD against commit under the cursor.  *note
     egg-log-buffer-diff-revs::

`C-u ='
     Prompt for a string and restrict to diffs introducing/removing it.

`C-u C-u ='
     Prompt for a regexp and restrict to diffs introducing/removing it.

`C-u C-u C-u ='
     Prompt for a pickaxe mode.

`u'
     Push commit under the cursor onto HEAD.  *note
     egg-log-buffer-push-to-local::

`C-u u'
     Instead of HEAD, prompt for another ref as destination.

`C-u C-u u'
     Will force the push evel if it would be non-ff.

A ref has all the context bindings of the commit line (*note
egg-log-commit-map::), plus
`L'
     Show reflogs for the ref under the cursor *note
     egg-log-buffer-reflog-ref::

`x'
     Remove the ref under the cursor.  *note egg-log-buffer-rm-ref::

`U'
     Upload the ref under the cursor to a remote repository.  *note
     egg-log-buffer-push-to-remote::

`d'
     Push HEAD to the ref under the cursor.  *note
     egg-log-buffer-push-head-to-local::

A local branch has all context bindings of a local ref (*note
egg-log-local-ref-map::), plus
`C-c C-='
     Compare the branch under the cursor against its upstream *note
     egg-log-buffer-diff-upstream::

`C-u C-c C-='
     Prompt for a string and restrict to diffs introducing/removing it.

`C-u C-u C-c C-='
     Prompt for a regexp and restrict to diffs introducing/removing it.

`C-u C-u C-u C-c C-='
     Prompt for a pickaxe mode.

A remote tracking branch has all the context bindings of the commit
line (*note egg-log-commit-map::), plus
`L'
     Show reflogs for the remote branch under the cursor *note
     egg-log-buffer-reflog-ref::

`x'
     Remove the remote branch under the cursor. Egg will ask if it
     should attempt to delete the branch on the remote site as well.
     *note egg-log-buffer-rm-ref::

`D'
     Download and update the remote tracking branch under the cursor.
     *note egg-log-buffer-fetch-remote-ref::

A remote site (it's the _site_ part in a site/branch ref name) has all
the context bindings of the commit line (*note egg-log-commit-map::),
plus
`D'
     Prompt for the refs to fetch the remote site under the cursor.
     *note egg-log-buffer-fetch::

`U'
     Prompt for the ref to push to the remote site under the cursor.
     *note egg-log-buffer-push::


File: egg.info,  Node: Blame,  Next: Resolving Conflicts,  Prev: Log,  Up: Top

Blame Mode
**********

Pointing Finger
===============

`C-x v a' (*note egg-file-toggle-blame-mode::), will bring the current
buffer in-or-out of annotation-mode, or more accurately, _blame mode_.
In blame-mode, editing is disabled (the buffer is in read-only mode).
Block of lines are prefix with a header describing the _last_ commit
that modified those lines. The command `egg-blame-locate-commit' pick
up that commit, open the LOG BUFFER and locate that commit in the DAG.

The context bindings in blame mode are:
     *note egg-blame-locate-commit::

`RET'
     Jump to a commit in the branch history from an annotated blame
     section.  *note egg-blame-locate-commit::

`q'
     Toggle blame mode for the current-file.  *note
     egg-file-toggle-blame-mode::

`n'
     Move to the next annotation.  *note egg-buffer-cmd-navigate-next::

`p'
     Move to the previous annotation.


File: egg.info,  Node: Resolving Conflicts,  Next: Customisations,  Prev: Blame,  Up: Top

Resolving Conflicts
*******************

Conflicts resolution is done in the STATUS BUFFER. First put the cursor
on top of the conflict area, ie. the text between the `<<<<<<<' and
`>>>>>>>'.  Then there 3 ways of performing a conflict resolution
THE GIT WAY
     Press RET, and git will open the file and locate the conflict.
     Edit the conflict and remove the `<<<<<<<', `=======' and
     `>>>>>>>' markers.

THE SIMPLE (EGG) WAY
     Press `m' on the conflict. Egg will ask the user to choose either,
     _ours_'s changes or _theirs_'s changes. The first choice depends
     on the location of the cursor. If the `m' was press on _ours_'s
     side (i.e. between `<<<<<<<' and `=======', the _ours_ will be the
     first choice. Otherwise, _theirs_'s changes will be the first
     choice.

THE HEAVY (EDIFF) WAY
     Press `=' on the conflict. Egg will launch `ediff3' to help
     resolving the conflict. If it was a merge operation, the buffers
     (from left-to-right or top-to-bottom, depending on the value of
     `ediff-split-window-function') are:
        * theirs (the branch being merged in)

        * ours (the current branch)

        * WorkTree's file (with conflicts)

     If it was a rebase operation, the buffers are:
        * ours (the upstream or _onto_ branch)

        * theirs (the branch being rebased)

        * WorkTree's file (with conflicts)

After resolving the conflict, add the file into the Index by pressing
`s' on the diff header in the STATUS BUFFER's Unmerged Section.


File: egg.info,  Node: Customisations,  Next: Commands,  Prev: Resolving Conflicts,  Up: Top

Customisations
**************

 -- User Option: egg-buffer-hide-sub-blocks-on-start
     For each type of egg special buffers, should its sub-blocks be
     initially hidden.

 -- User Option: egg-buffer-hide-section-type-on-start
     For each type of egg special buffers that show sequence of diffs,
     control the types of sub-block to be initially hidden.

 -- User Option: egg-buffer-hide-help-on-start
     For each type of egg special buffers has a help section, should
     the help section be initially hidden.

 -- User Option: egg-status-buffer-sections
     Select the sections that will be shown in the status buffer.

 -- User Option: egg-show-key-help-in-buffers
     For each type of egg special buffers, should the Help section be
     displayed.


File: egg.info,  Node: Commands,  Prev: Customisations,  Up: Top

Commands
********

 -- Command: egg-file-stage-current-file
     Add the contents of the current file into the index.

 -- Command: egg-file-diff
     Compare the file's current contents vs its contents in the index.
     With prefix, prompt for a revision to compare (instead of using
     the index) with the file's current contents.

 -- Command: egg-file-ediff
     Compare the file's current contents vs its contents in the index.
     With prefix, prompt for a revision to compare (instead of using
     the index) with the file's current contents.

 -- Command: egg-file-version-other-window
     Show the contents of the current file from the index. With prefix,
     prompt for a git revision and show the file's contents from that
     revision.

 -- Command: egg-file-checkout-other-version
     Replace the file's current contents with its contents from a
     revision.

 -- Command: egg-file-cancel-modifications
     Revert the file to its contents in the index.

 -- Command: egg-next-action
     Perform the _next_ action, whatever that is!

 -- Command: egg-status
     Show EGG STATUS buffer in another window but do not select it.
     With prefix, select the status buffer, *Note Status::.

 -- Command: egg-buffer-hide-all
     Hide all sections in buffer. With prefix, show all sections.

 -- Command: egg-buffer-cmd-navigate-next
     Move cursor to the next section

 -- Command: egg-buffer-cmd-navigate-prev
     Move cursor to the previous section

 -- Command: egg-section-cmd-toggle-hide-show
     Toggle the visibility of the section under the cursor.

 -- Command: egg-diff-section-cmd-undo
     For the file of diff header under the cursor, remove its
     differences vs the source revision.  Usually, this command revert
     the file to its staged state in the index. However, in a diff
     special egg buffer, it can change the file's contents to the one
     of the source revision.

 -- Command: egg-unmerged-conflict-checkout-side
     Checkout one side of the conflict under the cursor.

 -- Command: egg-unmerged-conflict-take-side
     Interactive resolve conflict under the cursor.

 -- Command: egg-hunk-section-cmd-undo
     Remove the file's modification described by the hunk under the
     cursor.

 -- Command: egg-stage-all-files
     Stage all tracked files in the repository.

 -- Command: egg-hunk-section-cmd-stage
     Add the hunk under the cursor to the index.

 -- Command: egg-diff-section-cmd-stage
     Update the index with the file in the diff header under the cursor.
     If the file was deleted in the workdir then remove it from the
     index.

 -- Command: egg-staged-section-cmd-ediff3
     Compare the staged copy of FILE and the version in HEAD using
     ediff.

 -- Command: egg-unmerged-section-cmd-ediff3
     Run ediff3 to resolve merge conflicts in file of the combined diff
     section under the cursor.

 -- Command: egg-unstaged-section-cmd-ediff
     For the file in the diff section under the cursor. Compare it with
     its staged copy using ediff.

 -- Command: egg-diff-section-cmd-ediff
     Run ediff on src and dest versions of the file in the diff section
     under the cursor.

 -- Command: egg-hunk-section-cmd-visit-file-other-window
     Visit the file in the diff section under the cursor, in the other
     window and goto the current line of the hunk.

 -- Command: egg-diff-section-cmd-visit-file-other-window
     Visit the file in the diff section under the cursor, in the other
     window.

 -- Command: egg-ignore-pattern-from-string-at-point
     Add an ignore pattern based on the string at point.

 -- Command: egg-find-file-at-point
     alias for `find-file-at-point'

 -- Command: egg-status-buffer-stage-untracked-file
     Add untracked file(s) to the repository.  Acts on a single file or
     on a region which contains the names of untracked files. With
     prefix, only create the index entries without adding the contents.

 -- Command: egg-diff-section-cmd-unstage
     For the file in the diff header under the cursor, revert its stage
     in the index to original.  If the file was a newly created file,
     it will be removed from the index.  If the file was added after a
     merge resolution, it will reverted back to conflicted state.
     Otherwise, its stage will be reset to HEAD.

 -- Command: egg-hunk-section-cmd-unstage
     Remove the hunk under the cursor from the index.

 -- Command: egg-diff-section-cmd-revert-to-head
     Revert the file in the diff section under the cursor and its slot
     in the index to its state in HEAD.

 -- Command: egg-diff-section-cmd-visit-file
     Visit FILE.

 -- Command: egg-hunk-section-cmd-visit-file
     Visit FILE and goto the current line of the hunk.

 -- Command: egg-section-cmd-toggle-hide-show-children
     Toggle the visibility of the subsections of the section under the
     cursor.

 -- Command: egg-start-new-branch
     start a new branch from HEAD, keeping local modifications.

 -- Command: egg-search-file-changes
     search in the DAG for commits that introduced or removed the
     _search term_.

 -- Command: egg-grep
     run grep on files tracked by git.

 -- Command: egg-status-buffer-stash-wip
     Prompt for a description and stash current work-in-progress in
     workdir and the index. With prefix, the command will also stash
     untracked/unignored files.

 -- Command: egg-diff-ref
     Prompt a revision compare against worktree.

 -- Command: egg-quit-buffer
     Leave (and bury) an egg special buffer

 -- Command: egg-status-buffer-checkout-ref
     Prompt a revision to checkout.

 -- Command: egg-buffer-cmd-refresh
     Refresh the current egg special buffer.

 -- Command: egg-log-buffer-style-command
     Re-run the command that create the buffer.

 -- Command: egg-status-buffer-undo-wdir
     When in the status buffer, throw away local modifications in the
     work-tree.  With prefix, reset the work-tree to its state in HEAD.
     Otherwise, reset the work-tree to its staged state in the index.

 -- Command: egg-unstage-all-files
     Unstage all files in the index.

 -- Command: egg-commit-log-edit
     Open the commit buffer for composing a message. With `C-u' prefix,
     re-compose the message of the last commit. With `C-u C-u' prefix,
     avoid all composition, amend the last commit by reusing its commit
     message.

 -- Command: egg-log-msg-done
     Take the appropriate action with the composed message.

 -- Command: egg-log-msg-newer-text
     Cycle forward through comment history.

 -- Command: egg-log-msg-older-text
     Cycle backward through comment history.

 -- Command: egg-log-msg-cancel
     Cancel the current message editing.

 -- Command: egg-buffer-selective-rebase-continue
     Continue the current rebase session.  The mode, sync or async,
     will depend on the nature of the current rebase session.

 -- Command: egg-buffer-selective-rebase-skip
     Skip the current commit and continue the current rebase session.
     The mode, sync or async, will depend on the nature of the current
     rebase session.

 -- Command: egg-buffer-rebase-abort
     Abort the current rebase.

 -- Command: egg-log
     Show the commit DAG of REF-NAME.

 -- Command: egg-reflog
     Show commit DAG of BRANCH and its reflogs.  This is just an
     alternative way to launch `egg-log'

 -- Command: egg-file-log
     Show the commits in the current branch's DAG that modified the
     current file.  With prefix,do not restrict the commits to the
     current branch's DAG.

 -- Command: egg-log-buffer-anchor-head
     Move the current branch or the detached HEAD to the commit under
     the cursor.  The index will be reset and files will in worktree
     updated. If a file that is different between the original commit
     and the new commit, the git command will abort. This is basically
     git reset -keep. With C-u prefix, HEAD will be moved, index will
     be reset and the work tree updated by throwing away all local
     modifications (this is basically git reset -hard). With C-u C-u
     prefix, the command will prompt for the git reset mode to perform.

 -- Command: egg-log-buffer-checkout-commit
     Checkout the commit at POS. With prefix, force the checkout even
     if the index was different from the new commit.

 -- Command: egg-log-buffer-start-new-branch
     Create a new branch, and make it a new HEAD

 -- Command: egg-log-buffer-create-new-branch
     Create a new branch, without checking it out.

 -- Command: egg-log-buffer-push-to-local
     Push a ref or a commit under the cursor onto HEAD.  With C-u,
     instead of HEAD, prompt for another ref as destination.  With C-u
     C-u, will force the push even if it would be non-ff.  When the
     destination of the push is HEAD, the underlying git command would
     be a pull (by default -ff-only).

 -- Command: egg-log-buffer-insert-commit
     Load and show the details of the commit under the cursor.

 -- Command: egg-log-buffer-tag-commit
     Tag the commit under the cursor.  With prefix, force the creation
     of the tag even if it replace an existing one with the same name.

 -- Command: egg-log-buffer-atag-commit
     Start composing the message for an annotated tag on the commit at
     the cursor.  With prefix, the tag will be gpg-signed.

 -- Command: egg-log-buffer-merge
     Merge to HEAD the path starting from the commit under the cursor.
     With C-u prefix, do not auto commit the merge result.  With C-u
     C-u prefix, prompt the user for the type of merge to perform.

 -- Command: egg-log-buffer-pick-1cherry
     Pick one cherry under the cursor and put on HEAD.  With prefix,
     will not auto-commit but let the user re-compose the message.

 -- Command: egg-log-buffer-rebase
     Rebase HEAD using the commit under the cursor as upstream.  If
     there was a commit marked as BASE, then rebase HEAD onto the
     commit under the cursor using the BASE commit as upstream.

 -- Command: egg-log-buffer-rebase-interactive
     Start an interactive rebase session using the marked commits.  The
     commit under the cursor is the where the chain of marked commits
     will rebased onto.

 -- Command: egg-log-buffer-diff-revs
     Compare HEAD against the rev under the cursor.

 -- Command: egg-log-buffer-rm-ref
     Remove the ref under the cursor.

 -- Command: egg-log-buffer-reflog-ref
     Show reflogs for the ref under the cursor.

 -- Command: egg-log-buffer-push-head-to-local
     WTF.

 -- Command: egg-log-buffer-fetch-remote-ref
     Download and update the remote tracking branch at under the cursor.

 -- Command: egg-search-changes
     Search history from HEAD for changes introducing/removing a
     term.If a BASE ref was marked, then restrict the search to
     BASE..HEAD.

 -- Command: egg-search-changes-all
     Search entire history for changes introducing/removing a term.

 -- Command: egg-log-locate-commit
     Relocate the commit under the cursor back to the full history in
     the log buffer.

 -- Command: egg-log-buffer-push-to-remote
     Upload the ref under the cursor to a remote repository.  If the
     ref track a remote tracking branch, then the repo to upload to is
     the repo of the remote tracking branch. Otherwise, prompt for a
     remote repo.

 -- Command: egg-search-file-changes-all
     Search file's full history for changes introducing/removing a term.
egg-find-tracked-file

 -- Command: egg-find-tracked-file
     Open a file tracked by git.

 -- Command: egg-sb-buffer-show-stash
     Load the details of the stash under the cursor.

 -- Command: egg-sb-buffer-apply-stash
     Apply the stash under the cursor.

 -- Command: egg-sb-buffer-drop-stash
     Drop the stash under the cursor.

 -- Command: egg-sb-buffer-pop-stash
     Pop and apply the stash under the cursor.

 -- Command: egg-log-msg-buffer-toggle-signed
     Toggle the to-be-gpg-signed state of the message being composed.

 -- Command: egg-log-buffer-next-ref
     Move cursor to the next ref.

 -- Command: egg-log-buffer-prev-ref
     Move cursor to the previous ref.

 -- Command: egg-log-show-ref
     Show information about the ref or the mark under the cursor.

 -- Command: egg-log-buffer-mark
     Mark commit under the cursor as the BASE commit.

 -- Command: egg-log-buffer-unmark
     Unmark commit under the cursor.  With C-u prefix, unmark all.

 -- Command: egg-log-buffer-mark-edit
     Mark commit under the cursor to be edited in the upcoming
     interactive rebase.  With C-u prefix, prompt for reordering.

 -- Command: egg-log-buffer-mark-squash
     Mark commit under the cursor to be squashed in the upcoming
     interactive rebase.  With C-u prefix, prompt for reordering.

 -- Command: egg-log-buffer-mark-pick
     Mark commit under the cursor to be picked in the upcoming
     interactive rebase.  With C-u prefix, prompt for reordering.

 -- Command: egg-log-buffer-diff-upstream
     Compare commit under the cursor against its upstream.

 -- Command: egg-log-buffer-fetch
     Fetch some refs from remote at POS.

 -- Command: egg-log-buffer-push
     Push some refs to the remote at POS

 -- Command: egg-blame-locate-commit
     Jump to a commit in the branch history from an annotated blame
     section.  With C-u prefix, the history of all refs is used.



Tag Table:
Node: Top619
Node: Rant1300
Node: Acknowledgements2540
Node: Overview3039
Ref: Context Menu5102
Ref: Sections6630
Ref: egg-section-map6980
Node: File7687
Node: Status10614
Ref: egg-buffer-mode-map12552
Ref: egg-status-buffer-mode-map13145
Ref: unstaged-diff-section15449
Ref: egg-diff-section-map15978
Ref: egg-unstaged-diff-section-map16444
Ref: egg-hunk-section-map17255
Ref: egg-unstaged-hunk-section-map17779
Ref: egg-unmerged-hunk-section-map18249
Ref: egg-unmerged-conflict-map18647
Ref: staged-diff-section18997
Ref: stash20343
Node: Commit21059
Node: Log22097
Ref: egg-log-buffer-base-map27985
Ref: egg-log-commit-base-map28709
Ref: egg-log-commit-map30671
Ref: egg-log-local-ref-map32137
Ref: egg-log-local-branch-map32602
Ref: egg-log-remote-branch-map33058
Ref: egg-log-remote-site-map33601
Node: Blame33815
Ref: egg-file-toggle-blame-mode33920
Ref: egg-blame-map34416
Node: Resolving Conflicts34787
Node: Customisations36399
Ref: egg-buffer-hide-sub-blocks-on-start36579
Ref: egg-buffer-hide-section-type-on-start36726
Ref: egg-buffer-hide-help-on-start36905
Ref: egg-status-buffer-sections37062
Ref: egg-show-key-help-in-buffers37175
Node: Commands37262
Ref: egg-file-stage-current-file37390
Ref: egg-file-diff37476
Ref: egg-file-ediff37695
Ref: egg-file-version-other-window37929
Ref: egg-file-checkout-other-version38132
Ref: egg-file-cancel-modifications38257
Ref: egg-next-action38338
Ref: egg-status38413
Ref: egg-buffer-hide-all38575
Ref: egg-buffer-cmd-navigate-next38684
Ref: egg-buffer-cmd-navigate-prev38764
Ref: egg-section-cmd-toggle-hide-show38852
Ref: egg-diff-section-cmd-undo38952
Ref: egg-unmerged-conflict-checkout-side39301
Ref: egg-unmerged-conflict-take-side39404
Ref: egg-hunk-section-cmd-undo39496
Ref: egg-stage-all-files39611
Ref: egg-hunk-section-cmd-stage39700
Ref: egg-diff-section-cmd-stage39790
Ref: egg-staged-section-cmd-ediff339987
Ref: egg-unmerged-section-cmd-ediff340112
Ref: egg-unstaged-section-cmd-ediff40260
Ref: egg-diff-section-cmd-ediff40407
Ref: egg-hunk-section-cmd-visit-file-other-window40561
Ref: egg-diff-section-cmd-visit-file-other-window40742
Ref: egg-ignore-pattern-from-string-at-point40880
Ref: egg-find-file-at-point40974
Ref: egg-status-buffer-stage-untracked-file41063
Ref: egg-diff-section-cmd-unstage41317
Ref: egg-hunk-section-cmd-unstage41688
Ref: egg-diff-section-cmd-revert-to-head41792
Ref: egg-diff-section-cmd-visit-file41949
Ref: egg-hunk-section-cmd-visit-file42012
Ref: egg-section-cmd-toggle-hide-show-children42123
Ref: egg-start-new-branch42242
Ref: egg-search-file-changes42344
Ref: egg-grep42453
Ref: egg-status-buffer-stash-wip42534
Ref: egg-diff-ref42730
Ref: egg-quit-buffer42809
Ref: egg-status-buffer-checkout-ref42898
Ref: egg-buffer-cmd-refresh42971
Ref: egg-log-buffer-style-command43059
Ref: egg-status-buffer-undo-wdir43149
Ref: egg-unstage-all-files43397
Ref: egg-commit-log-edit43468
Ref: egg-log-msg-done43728
Ref: egg-log-msg-newer-text43825
Ref: egg-log-msg-older-text43906
Ref: egg-log-msg-cancel43984
Ref: egg-buffer-selective-rebase-continue44076
Ref: egg-buffer-selective-rebase-skip44253
Ref: egg-buffer-rebase-abort44453
Ref: egg-log44506
Ref: egg-reflog44569
Ref: egg-file-log44702
Ref: egg-log-buffer-anchor-head44905
Ref: egg-log-buffer-checkout-commit45508
Ref: egg-log-buffer-start-new-branch45677
Ref: egg-log-buffer-create-new-branch45773
Ref: egg-log-buffer-push-to-local45867
Ref: egg-log-buffer-insert-commit46225
Ref: egg-log-buffer-tag-commit46328
Ref: egg-log-buffer-atag-commit46511
Ref: egg-log-buffer-merge46676
Ref: egg-log-buffer-pick-1cherry46925
Ref: egg-log-buffer-rebase47097
Ref: egg-log-buffer-rebase-interactive47343
Ref: egg-log-buffer-diff-revs47548
Ref: egg-log-buffer-rm-ref47636
Ref: egg-log-buffer-reflog-ref47714
Ref: egg-log-buffer-push-head-to-local47810
Ref: egg-log-buffer-fetch-remote-ref47866
Ref: egg-search-changes47972
Ref: egg-search-changes-all48155
Ref: egg-log-locate-commit48259
Ref: egg-log-buffer-push-to-remote48394
Ref: egg-search-file-changes-all48663
Ref: egg-find-tracked-file48794
Ref: egg-sb-buffer-show-stash48866
Ref: egg-sb-buffer-apply-stash48959
Ref: egg-sb-buffer-drop-stash49037
Ref: egg-sb-buffer-pop-stash49113
Ref: egg-log-msg-buffer-toggle-signed49207
Ref: egg-log-buffer-next-ref49315
Ref: egg-log-buffer-prev-ref49387
Ref: egg-log-show-ref49456
Ref: egg-log-buffer-mark49556
Ref: egg-log-buffer-unmark49646
Ref: egg-log-buffer-mark-edit49752
Ref: egg-log-buffer-mark-squash49922
Ref: egg-log-buffer-mark-pick50092
Ref: egg-log-buffer-diff-upstream50264
Ref: egg-log-buffer-fetch50358
Ref: egg-log-buffer-push50433
Ref: egg-blame-locate-commit50512

End Tag Table


Local Variables:
coding: utf-8
End:
